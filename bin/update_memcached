#!/usr/bin/env ruby

require 'pp'
require 'benchmark'
require 'dalli'
require_relative '../../namecoin_client/lib/namecoin_client'
require_relative '../model/shares'

HASHRATE_FORMAT = [
  ['%.2fTih/s', 1_000_000_000_000],
  ['%.2fGih/s', 1_000_000_000],
  ['%.2fMih/s', 1_000_000],
  ['%.2fKih/s', 1_000],
]

def hashrate_format(hashrate)
  HASHRATE_FORMAT.each do |format, size|
    return format % (hashrate.to_f / size) if hashrate >= size
  end

  "%.2fh/s" % hashrate.to_f
end

NMCC = NamecoinClient.new
CACHE = Dalli::Client.new

loop do
  sec = Benchmark.realtime do
    transactions = NMCC.listtransactions('', 1000)
    blockcount = NMCC.getblockcount
    difficulty = NMCC.getdifficulty

    hashrate = NMC::Shares.hash_per_second
    blocks_found = NMC::Shares.blocks_found

    current_shares = NMC::Shares.current_shares
    current_share_count = current_shares.inject(0){|s, v| s + v[:good] }
    current_user_count = current_shares.count
    hashes_per_user = hashrate/current_user_count.to_f

    live_data = {
      hashrate: hashrate_format(hashrate),
      blocks_found: blocks_found,
      blocks_total: blockcount,
      difficulty: "%.2f" % difficulty,
      current_share_count: current_share_count,
      current_user_count: current_user_count,
      hashes_per_user: hashrate_format(hashes_per_user),
    }

    CACHE.set 'live_data', live_data
    CACHE.set 'namecoind_transactions', transactions # bigger than 1mb, can't pull right now

    last_block = NMC::Shares.last_won_share

    last_block_found = last_block.created_at.utc
    CACHE.set 'last_block_found', last_block_found
    previous_block = NMC::Shares.last_won_share(last_block)
    previous_block_found = previous_block.created_at.utc

    current_round_duration = "%02d:%02d" % Rational(Time.now.utc - last_block_found,60).divmod(60)
    CACHE.set 'current_round_duration', current_round_duration

    previous_round_duration = "%02d:%02d" % Rational(last_block_found - previous_block_found,60).divmod(60)
    CACHE.set 'previous_round_duration', previous_round_duration

    total_shares = NMC::Shares.count
    CACHE.set 'total_shares', total_shares

    average_time_per_round = "%02d:%02d" % NMC::Shares.average_time_per_round
    CACHE.set 'average_time_per_round', average_time_per_round

    average_shares_per_round = NMC::Shares.average_shares_per_round
    CACHE.set 'average_shares_per_round', average_shares_per_round
  end

  puts "Update took #{sec} seconds"
  sleep 5
end
